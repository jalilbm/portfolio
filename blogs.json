{"status":"ok","feed":{"url":"https://medium.com/feed/@jalilbm","title":"Stories by Abdeldjalil Benharkat on Medium","link":"https://medium.com/@jalilbm?source=rss-c89323f6a4a4------2","author":"","description":"Stories by Abdeldjalil Benharkat on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*qDBsaG812OA6bAkKHmarNA.png"},"items":[{"title":"Building APIs for the Real World: Principles for Better Developer Experiences","pubDate":"2023-12-17 18:37:05","link":"https://medium.com/@jalilbm/building-apis-for-the-real-world-principles-for-better-developer-experiences-973d7efcb6d2?source=rss-c89323f6a4a4------2","guid":"https://medium.com/p/973d7efcb6d2","author":"Abdeldjalil Benharkat","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6dATP8VPX5bXIo9MORaJxg.png\"></figure><h3>Introduction</h3>\n<p>APIs are pivotal in today\u2019s tech ecosystem, acting as connectors for various services and applications. Designing an effective API is a complex task that demands not just technical skills but a deep understanding of user needs and developer challenges. In this post, we\u2019ll explore key principles for API design, focusing on real-life use cases and practicality.</p>\n<h3>Grounding in Real-Life Use\u00a0Cases</h3>\n<ul>\n<li>\n<strong>Task-Oriented Design:</strong> APIs should directly address common developer tasks. \ud83d\udee0\ufe0f <br><em>Example: A payment API could streamline the checkout process by minimizing required\u00a0steps.</em>\n</li>\n<li>\n<strong>App-Centric:</strong> Cater to diverse applications, from mobile apps to large systems.\u00a0\ud83d\udcf1\ud83d\udcbb</li>\n<li>\n<strong>Ease of Integration:</strong> Focus on making the integration process straightforward. \u2699\ufe0f</li>\n<li>\n<strong>Developer Advocacy:</strong> Aim for an API that developers advocate for based on positive experiences. \ud83d\udc4d</li>\n</ul>\n<h3>User-Friendly Design</h3>\n<ul>\n<li>\n<strong>Clarity and Simplicity:</strong> The API should be easy to understand and use. \ud83d\udcd6<br><em>Example: A user authentication API providing clear examples for various authentication flows.</em>\n</li>\n<li>\n<strong>Quick Onboarding:</strong> Ensure a fast start-up process with concise documentation. \ud83d\ude80</li>\n</ul>\n<h3>Consistency</h3>\n<ul>\n<li>\n<strong>Uniform Design: </strong>Ensure that the entire API follows a unified design principle. This consistency makes it easier for developers to understand and use different parts of the API without confusion. \ud83e\udde9</li>\n<li>\n<strong>Standardized Naming Conventions: </strong>Adopt a clear and consistent naming scheme for endpoints, parameters, and data structures. This reduces learning time and helps in maintaining a predictable structure. \ud83d\udd24</li>\n<li>\n<strong>Predictability Equals Efficiency: </strong>A consistent and predictable API not only enhances the developer experience but also significantly reduces the cognitive load, allowing developers to focus more on innovation and less on navigating the API.\u00a0\ud83c\udfaf</li>\n</ul>\n<h3>Documentation and\u00a0Support</h3>\n<ul>\n<li>\n<strong>Comprehensive Guides:</strong> Offer thorough documentation that clearly explains every aspect of the API, from basic setup to advanced features. \ud83d\udcda</li>\n<li>\n<strong>Interactive Examples:</strong> Incorporate live examples and interactive environments, allowing developers to see the API in action and experiment with its features. \ud83d\udca1<br><em>Example: An interactive API console where developers can test requests and see responses.</em>\n</li>\n<li>\n<strong>Learning Resources:</strong> Provide a variety of tutorials and guides, catering to different skill levels and use cases.\u00a0\ud83c\udf93</li>\n<li>\n<strong>Sandbox for Safe Testing:</strong> Implement a sandbox environment, enabling developers to test and troubleshoot in a safe, controlled setting without impacting live data.\u00a0\ud83c\udfd6\ufe0f</li>\n</ul>\n<h3>Troubleshooting and Debugging</h3>\n<ul>\n<li>\n<strong>Meaningful Error Messages:</strong> Ensure that the API returns informative and specific error messages, helping developers quickly understand and rectify issues. \u2757<br><em>Example: Instead of a generic \u201cError 500,\u201d provide a message like \u201cInvoice ID not\u00a0found.\u201d</em>\n</li>\n<li>\n<strong>Detailed Logging:</strong> Provide logs with comprehensive details, enabling developers to trace and debug effectively. \ud83d\udcca</li>\n<li>\n<strong>Error Categorization:</strong> Organize errors logically into categories. This classification aids developers in quickly identifying the nature and source of problems. \ud83d\uddc2\ufe0f</li>\n<li>\n<strong>Documented Solutions:</strong> Include a section in your documentation dedicated to common errors and their resolutions, further easing the debugging process for developers. \ud83d\udcdd</li>\n</ul>\n<h3>Extensibility and Versioning</h3>\n<ul>\n<li>\n<strong>Future-Proof Design:</strong> Develop your API with scalability in mind, allowing for seamless integration of new features and enhancements without overhauling the entire system.\u00a0\ud83c\udf31</li>\n<li>\n<strong>Early Versioning:</strong> Implement versioning from the outset. This foresight ensures that future updates can be rolled out smoothly, without disrupting existing users.\u00a0\ud83c\udff7\ufe0f</li>\n<li>\n<strong>Backward Compatibility:</strong> Prioritize maintaining backward compatibility with each new version, safeguarding against breaking changes that could impact current implementations.</li>\n<li>\n<strong>Seamless Evolution:</strong> Design your API so that it can evolve without forcing users to overhaul their existing implementations. This balance is key to maintaining a loyal user base while moving forward with technological advancements. \ud83d\udee0\ufe0f</li>\n</ul>\n<h3>Handling Breaking\u00a0Changes</h3>\n<ul>\n<li>\n<strong>Developer Impact Awareness:</strong> Recognize the significant impact that breaking changes can have on developers. Any modification that disrupts existing functionality should be approached with caution.\u00a0\ud83d\udc94</li>\n<li>\n<strong>Transition Periods:</strong> When deprecating APIs or introducing changes that break backward compatibility, provide ample notice. Offer a generous transition period for developers to adapt their applications. \u23f3</li>\n<li>\n<strong>Clear Communication:</strong> Ensure that all changes, especially those that could cause disruptions, are communicated clearly and well in advance. This includes detailed documentation on the nature of the changes and the reasons behind them.\u00a0\ud83d\udce2</li>\n<li>\n<strong>Support During Transition:</strong> Offer guidance and support to help developers navigate through the changes. This might include updated documentation, migration tools, or direct assistance. \ud83c\udd98</li>\n</ul>\n<h3>Feedback and Community Engagement</h3>\n<ul>\n<li>\n<strong>Soliciting Feedback:</strong> Actively seek out and encourage feedback from the developer community. This engagement is invaluable for understanding how your API is used in real-world scenarios and what improvements are needed.\u00a0\ud83d\udcac</li>\n<li>\n<strong>Inclusion in Lifecycle: </strong>Involve developers in the API lifecycle. Their insights can guide enhancements, bug fixes, and new features, ensuring the API remains relevant and effective. \ud83d\udc65</li>\n<li>\n<strong>Iterative Improvement:</strong> Use the feedback gathered to continuously refine your API. This iterative process helps in creating an API that not only meets but exceeds developer expectations. \ud83d\udd01</li>\n<li>\n<strong>Building a Community: </strong>Foster a sense of community among the users of your API. A strong community leads to robust support networks, shared knowledge, and a loyal user base. \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66</li>\n</ul>\n<h3>Conclusion</h3>\n<p>The journey of API design is continuous and evolving. By prioritizing user-centric principles, such as real-life applicability, simplicity, and consistency, we can create APIs that not only meet technical standards but also resonate with the developer community. Remember, an API is more than a tool; it\u2019s a bridge connecting ideas to implementation. By engaging with user feedback and fostering a supportive community, we ensure our APIs remain dynamic, useful, and ahead of the curve.\u00a0\ud83c\udf09\ud83d\ude80</p>\n<p>\ud83d\udc4f Enjoyed the read? Keep the wisdom flowing with a \u2615! <a href=\"https://www.buymeacoffee.com/jalilbm\">Buy Me a Coffee</a>\u00a0\ud83d\ude4f</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=973d7efcb6d2\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6dATP8VPX5bXIo9MORaJxg.png\"></figure><h3>Introduction</h3>\n<p>APIs are pivotal in today\u2019s tech ecosystem, acting as connectors for various services and applications. Designing an effective API is a complex task that demands not just technical skills but a deep understanding of user needs and developer challenges. In this post, we\u2019ll explore key principles for API design, focusing on real-life use cases and practicality.</p>\n<h3>Grounding in Real-Life Use\u00a0Cases</h3>\n<ul>\n<li>\n<strong>Task-Oriented Design:</strong> APIs should directly address common developer tasks. \ud83d\udee0\ufe0f <br><em>Example: A payment API could streamline the checkout process by minimizing required\u00a0steps.</em>\n</li>\n<li>\n<strong>App-Centric:</strong> Cater to diverse applications, from mobile apps to large systems.\u00a0\ud83d\udcf1\ud83d\udcbb</li>\n<li>\n<strong>Ease of Integration:</strong> Focus on making the integration process straightforward. \u2699\ufe0f</li>\n<li>\n<strong>Developer Advocacy:</strong> Aim for an API that developers advocate for based on positive experiences. \ud83d\udc4d</li>\n</ul>\n<h3>User-Friendly Design</h3>\n<ul>\n<li>\n<strong>Clarity and Simplicity:</strong> The API should be easy to understand and use. \ud83d\udcd6<br><em>Example: A user authentication API providing clear examples for various authentication flows.</em>\n</li>\n<li>\n<strong>Quick Onboarding:</strong> Ensure a fast start-up process with concise documentation. \ud83d\ude80</li>\n</ul>\n<h3>Consistency</h3>\n<ul>\n<li>\n<strong>Uniform Design: </strong>Ensure that the entire API follows a unified design principle. This consistency makes it easier for developers to understand and use different parts of the API without confusion. \ud83e\udde9</li>\n<li>\n<strong>Standardized Naming Conventions: </strong>Adopt a clear and consistent naming scheme for endpoints, parameters, and data structures. This reduces learning time and helps in maintaining a predictable structure. \ud83d\udd24</li>\n<li>\n<strong>Predictability Equals Efficiency: </strong>A consistent and predictable API not only enhances the developer experience but also significantly reduces the cognitive load, allowing developers to focus more on innovation and less on navigating the API.\u00a0\ud83c\udfaf</li>\n</ul>\n<h3>Documentation and\u00a0Support</h3>\n<ul>\n<li>\n<strong>Comprehensive Guides:</strong> Offer thorough documentation that clearly explains every aspect of the API, from basic setup to advanced features. \ud83d\udcda</li>\n<li>\n<strong>Interactive Examples:</strong> Incorporate live examples and interactive environments, allowing developers to see the API in action and experiment with its features. \ud83d\udca1<br><em>Example: An interactive API console where developers can test requests and see responses.</em>\n</li>\n<li>\n<strong>Learning Resources:</strong> Provide a variety of tutorials and guides, catering to different skill levels and use cases.\u00a0\ud83c\udf93</li>\n<li>\n<strong>Sandbox for Safe Testing:</strong> Implement a sandbox environment, enabling developers to test and troubleshoot in a safe, controlled setting without impacting live data.\u00a0\ud83c\udfd6\ufe0f</li>\n</ul>\n<h3>Troubleshooting and Debugging</h3>\n<ul>\n<li>\n<strong>Meaningful Error Messages:</strong> Ensure that the API returns informative and specific error messages, helping developers quickly understand and rectify issues. \u2757<br><em>Example: Instead of a generic \u201cError 500,\u201d provide a message like \u201cInvoice ID not\u00a0found.\u201d</em>\n</li>\n<li>\n<strong>Detailed Logging:</strong> Provide logs with comprehensive details, enabling developers to trace and debug effectively. \ud83d\udcca</li>\n<li>\n<strong>Error Categorization:</strong> Organize errors logically into categories. This classification aids developers in quickly identifying the nature and source of problems. \ud83d\uddc2\ufe0f</li>\n<li>\n<strong>Documented Solutions:</strong> Include a section in your documentation dedicated to common errors and their resolutions, further easing the debugging process for developers. \ud83d\udcdd</li>\n</ul>\n<h3>Extensibility and Versioning</h3>\n<ul>\n<li>\n<strong>Future-Proof Design:</strong> Develop your API with scalability in mind, allowing for seamless integration of new features and enhancements without overhauling the entire system.\u00a0\ud83c\udf31</li>\n<li>\n<strong>Early Versioning:</strong> Implement versioning from the outset. This foresight ensures that future updates can be rolled out smoothly, without disrupting existing users.\u00a0\ud83c\udff7\ufe0f</li>\n<li>\n<strong>Backward Compatibility:</strong> Prioritize maintaining backward compatibility with each new version, safeguarding against breaking changes that could impact current implementations.</li>\n<li>\n<strong>Seamless Evolution:</strong> Design your API so that it can evolve without forcing users to overhaul their existing implementations. This balance is key to maintaining a loyal user base while moving forward with technological advancements. \ud83d\udee0\ufe0f</li>\n</ul>\n<h3>Handling Breaking\u00a0Changes</h3>\n<ul>\n<li>\n<strong>Developer Impact Awareness:</strong> Recognize the significant impact that breaking changes can have on developers. Any modification that disrupts existing functionality should be approached with caution.\u00a0\ud83d\udc94</li>\n<li>\n<strong>Transition Periods:</strong> When deprecating APIs or introducing changes that break backward compatibility, provide ample notice. Offer a generous transition period for developers to adapt their applications. \u23f3</li>\n<li>\n<strong>Clear Communication:</strong> Ensure that all changes, especially those that could cause disruptions, are communicated clearly and well in advance. This includes detailed documentation on the nature of the changes and the reasons behind them.\u00a0\ud83d\udce2</li>\n<li>\n<strong>Support During Transition:</strong> Offer guidance and support to help developers navigate through the changes. This might include updated documentation, migration tools, or direct assistance. \ud83c\udd98</li>\n</ul>\n<h3>Feedback and Community Engagement</h3>\n<ul>\n<li>\n<strong>Soliciting Feedback:</strong> Actively seek out and encourage feedback from the developer community. This engagement is invaluable for understanding how your API is used in real-world scenarios and what improvements are needed.\u00a0\ud83d\udcac</li>\n<li>\n<strong>Inclusion in Lifecycle: </strong>Involve developers in the API lifecycle. Their insights can guide enhancements, bug fixes, and new features, ensuring the API remains relevant and effective. \ud83d\udc65</li>\n<li>\n<strong>Iterative Improvement:</strong> Use the feedback gathered to continuously refine your API. This iterative process helps in creating an API that not only meets but exceeds developer expectations. \ud83d\udd01</li>\n<li>\n<strong>Building a Community: </strong>Foster a sense of community among the users of your API. A strong community leads to robust support networks, shared knowledge, and a loyal user base. \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66</li>\n</ul>\n<h3>Conclusion</h3>\n<p>The journey of API design is continuous and evolving. By prioritizing user-centric principles, such as real-life applicability, simplicity, and consistency, we can create APIs that not only meet technical standards but also resonate with the developer community. Remember, an API is more than a tool; it\u2019s a bridge connecting ideas to implementation. By engaging with user feedback and fostering a supportive community, we ensure our APIs remain dynamic, useful, and ahead of the curve.\u00a0\ud83c\udf09\ud83d\ude80</p>\n<p>\ud83d\udc4f Enjoyed the read? Keep the wisdom flowing with a \u2615! <a href=\"https://www.buymeacoffee.com/jalilbm\">Buy Me a Coffee</a>\u00a0\ud83d\ude4f</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=973d7efcb6d2\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["api","api-management","api-development","api-integration"]},{"title":"JavaScript Compilation, Hoisting, and the Temporal Dead Zone","pubDate":"2023-10-26 22:50:04","link":"https://medium.com/@jalilbm/javascript-compilation-hoisting-and-the-temporal-dead-zone-92e5417dd904?source=rss-c89323f6a4a4------2","guid":"https://medium.com/p/92e5417dd904","author":"Abdeldjalil Benharkat","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OTEkTcH7cQj8P1qKGOVVyA.png\"></figure><h3>Introduction</h3>\n<p>\ud83d\udc4b Hey there! Ever found yourself puzzled by how variables behave or why your code doesn\u2019t run as expected? \ud83e\udd14 Today, we\u2019re not just scratching the surface; we\u2019re going deep\u200a\u2014\u200ainto JavaScript <strong>Compilation</strong>, <strong>Hoisting</strong>, and the enigmatic <strong>Temporal Dead Zone (TDZ)</strong>. Buckle up; it\u2019s going to be a wild ride!\u00a0\ud83d\ude80</p>\n<h3>Challenge:</h3>\n<p>But before we get into the nitty-gritty, let\u2019s kick things off with a little challenge. Take a look at the following JavaScript code snippets and try to guess what the output will be for each console.log() statement:</p>\n<pre>// Using var<br>console.log(myVar);<br>var myVar = \"I'm a var!\";<br><br>// Using let<br>console.log(myLet);<br>let myLet = \"I'm a let!\";<br><br>// Using const<br>console.log(myConst);<br>const myConst = \"I'm a const!\";</pre>\n<p>Got your guesses locked in?\u00a0\ud83e\udd13</p>\n<h4><strong>The Answers Are\u00a0In!</strong></h4>\n<p>Here\u2019s what you\u2019d see if you ran these snippets:</p>\n<ul>\n<li>For var: You'll get undefined.</li>\n<li>For let: You'll get a ReferenceError.</li>\n<li>For const: You'll also get a ReferenceError.</li>\n</ul>\n<p>Surprised? If you\u2019re wondering why these outputs are what they are, keep reading! We\u2019re about to dive deep into the Temporal Dead Zone and JavaScript\u2019s quirky behavior. \ud83d\ude80</p>\n<h3>How JavaScript Compilation Works</h3>\n<p>Forget the notion that JavaScript just reads your code top to bottom without a clue. Before executing any code, JavaScript does a full scan, or <em>parsing</em>, to understand the lay of the land. It identifies where variables are declared, how scopes are set up, and what functions are in\u00a0play.</p>\n<p>This initial scan is crucial because it sets the stage for the actual execution. It\u2019s like reading through a recipe before you start cooking; you need to know what ingredients you\u2019ll need and when to add\u00a0them.</p>\n<h3>Understanding Hoisting in JavaScript</h3>\n<p>let\u2019s dive into a concept that often leaves devs puzzled: <strong>Hoisting</strong>. \ud83e\udd14</p>\n<h4>What is Hoisting?</h4>\n<p>In simple terms, hoisting is JavaScript\u2019s behavior of moving all variable and function declarations to the top of their containing scope during the compilation phase. Imagine you\u2019re reading a mystery novel, and all the clues are given to you upfront. That\u2019s hoisting for you!\u00a0\ud83d\udd75\ufe0f\u200d\u2642\ufe0f</p>\n<h4>How Does it\u00a0Work?</h4>\n<p>When the JavaScript engine compiles your code, it scans for all the variable and function declarations and \u201choists\u201d them to the top of their scope. However, <strong>only the declarations are hoisted</strong>, <strong>not the initializations </strong>\ud83d\udeab.</p>\n<h3>What is the Temporal Dead\u00a0Zone?</h3>\n<p>In JavaScript, when the code is first parsed, it acknowledges that let and const variables exist but doesn't allow you to use them until they're initialized. This \"no-use\" zone is what we call the <strong>Temporal Dead Zone</strong>. Try to use them too early, and you'll get a <strong>ReferenceError</strong>, like trying to add an ingredient you haven't prepped yet.\u00a0\ud83d\udeab</p>\n<h3>Why Var Didn\u2019t Throw an\u00a0Error?</h3>\n<p>So, you nailed it if you guessed that var would output undefined, while let and const would hit you with a ReferenceError. \ud83c\udfaf But why do they behave so differently?</p>\n<h4>The Var\u00a0Era</h4>\n<p>var has been around since JavaScript's inception in 1995. It was designed to be forgiving, giving you an undefined instead of an error if accessed before initialization. This was in line with the language's initial goal to be user-friendly and easy to pick up. But this leniency often led to silent errors and bugs that were hard to debug.\u00a0\ud83d\udc1e</p>\n<h4>The 2015 Game-Changer</h4>\n<p>Fast forward to 2015, when ECMAScript 6 (ES6) introduced let and const. The language designers wanted to provide a more robust way to declare variables. They aimed to eliminate the \"silent failures\" that var could cause, making the language more predictable and easier to\u00a0debug.</p>\n<h4>Why Not Just Fix\u00a0Var?</h4>\n<p>You might wonder, if var had issues, why not just fix it? Well, changing the behavior of var would break existing code, creating a nightmare for backward compatibility. So, instead of altering var, let and const were introduced as a more disciplined alternative.</p>\n<h4>So finnaly</h4>\n<ul>\n<li>var: Gets hoisted and initialized with undefined. It's the old way, where errors are more like whispers.</li>\n<li>let and const: Also get hoisted but land in the <strong>Temporal Dead Zone</strong> <strong>(TDZ)</strong> until you explicitly initialize them. Try to access them too early, and you get a loud <strong>ReferenceError</strong>. \ud83d\udeab</li>\n</ul>\n<p>So, the introduction of let and const wasn't just an upgrade; it was a conscious decision to correct the shortcomings of var without breaking old\u00a0code.</p>\n<h3>Conclusion</h3>\n<p>And that\u2019s a wrap! We\u2019ve journeyed through the intricacies of JavaScript Compilation, unraveled the enigma of Hoisting, and decoded the Temporal Dead Zone. \ud83c\udf89 Understanding these core concepts doesn\u2019t just make you a better coder; it elevates you to JavaScript guru status.\u00a0\ud83e\uddd9\u200d\u2642\ufe0f</p>\n<p>So, the next time a variable throws you for a loop or your code acts like it\u2019s possessed, you\u2019ll be the exorcist who knows exactly how to cast out those coding demons.\u00a0\ud83d\udeab</p>\n<p>If this deep dive illuminated some dark corners of your JavaScript knowledge, <a href=\"https://www.buymeacoffee.com/jalilbm\">consider buying me a \u2615</a>. Your support keeps the enlightenment coming!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=92e5417dd904\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OTEkTcH7cQj8P1qKGOVVyA.png\"></figure><h3>Introduction</h3>\n<p>\ud83d\udc4b Hey there! Ever found yourself puzzled by how variables behave or why your code doesn\u2019t run as expected? \ud83e\udd14 Today, we\u2019re not just scratching the surface; we\u2019re going deep\u200a\u2014\u200ainto JavaScript <strong>Compilation</strong>, <strong>Hoisting</strong>, and the enigmatic <strong>Temporal Dead Zone (TDZ)</strong>. Buckle up; it\u2019s going to be a wild ride!\u00a0\ud83d\ude80</p>\n<h3>Challenge:</h3>\n<p>But before we get into the nitty-gritty, let\u2019s kick things off with a little challenge. Take a look at the following JavaScript code snippets and try to guess what the output will be for each console.log() statement:</p>\n<pre>// Using var<br>console.log(myVar);<br>var myVar = \"I'm a var!\";<br><br>// Using let<br>console.log(myLet);<br>let myLet = \"I'm a let!\";<br><br>// Using const<br>console.log(myConst);<br>const myConst = \"I'm a const!\";</pre>\n<p>Got your guesses locked in?\u00a0\ud83e\udd13</p>\n<h4><strong>The Answers Are\u00a0In!</strong></h4>\n<p>Here\u2019s what you\u2019d see if you ran these snippets:</p>\n<ul>\n<li>For var: You'll get undefined.</li>\n<li>For let: You'll get a ReferenceError.</li>\n<li>For const: You'll also get a ReferenceError.</li>\n</ul>\n<p>Surprised? If you\u2019re wondering why these outputs are what they are, keep reading! We\u2019re about to dive deep into the Temporal Dead Zone and JavaScript\u2019s quirky behavior. \ud83d\ude80</p>\n<h3>How JavaScript Compilation Works</h3>\n<p>Forget the notion that JavaScript just reads your code top to bottom without a clue. Before executing any code, JavaScript does a full scan, or <em>parsing</em>, to understand the lay of the land. It identifies where variables are declared, how scopes are set up, and what functions are in\u00a0play.</p>\n<p>This initial scan is crucial because it sets the stage for the actual execution. It\u2019s like reading through a recipe before you start cooking; you need to know what ingredients you\u2019ll need and when to add\u00a0them.</p>\n<h3>Understanding Hoisting in JavaScript</h3>\n<p>let\u2019s dive into a concept that often leaves devs puzzled: <strong>Hoisting</strong>. \ud83e\udd14</p>\n<h4>What is Hoisting?</h4>\n<p>In simple terms, hoisting is JavaScript\u2019s behavior of moving all variable and function declarations to the top of their containing scope during the compilation phase. Imagine you\u2019re reading a mystery novel, and all the clues are given to you upfront. That\u2019s hoisting for you!\u00a0\ud83d\udd75\ufe0f\u200d\u2642\ufe0f</p>\n<h4>How Does it\u00a0Work?</h4>\n<p>When the JavaScript engine compiles your code, it scans for all the variable and function declarations and \u201choists\u201d them to the top of their scope. However, <strong>only the declarations are hoisted</strong>, <strong>not the initializations </strong>\ud83d\udeab.</p>\n<h3>What is the Temporal Dead\u00a0Zone?</h3>\n<p>In JavaScript, when the code is first parsed, it acknowledges that let and const variables exist but doesn't allow you to use them until they're initialized. This \"no-use\" zone is what we call the <strong>Temporal Dead Zone</strong>. Try to use them too early, and you'll get a <strong>ReferenceError</strong>, like trying to add an ingredient you haven't prepped yet.\u00a0\ud83d\udeab</p>\n<h3>Why Var Didn\u2019t Throw an\u00a0Error?</h3>\n<p>So, you nailed it if you guessed that var would output undefined, while let and const would hit you with a ReferenceError. \ud83c\udfaf But why do they behave so differently?</p>\n<h4>The Var\u00a0Era</h4>\n<p>var has been around since JavaScript's inception in 1995. It was designed to be forgiving, giving you an undefined instead of an error if accessed before initialization. This was in line with the language's initial goal to be user-friendly and easy to pick up. But this leniency often led to silent errors and bugs that were hard to debug.\u00a0\ud83d\udc1e</p>\n<h4>The 2015 Game-Changer</h4>\n<p>Fast forward to 2015, when ECMAScript 6 (ES6) introduced let and const. The language designers wanted to provide a more robust way to declare variables. They aimed to eliminate the \"silent failures\" that var could cause, making the language more predictable and easier to\u00a0debug.</p>\n<h4>Why Not Just Fix\u00a0Var?</h4>\n<p>You might wonder, if var had issues, why not just fix it? Well, changing the behavior of var would break existing code, creating a nightmare for backward compatibility. So, instead of altering var, let and const were introduced as a more disciplined alternative.</p>\n<h4>So finnaly</h4>\n<ul>\n<li>var: Gets hoisted and initialized with undefined. It's the old way, where errors are more like whispers.</li>\n<li>let and const: Also get hoisted but land in the <strong>Temporal Dead Zone</strong> <strong>(TDZ)</strong> until you explicitly initialize them. Try to access them too early, and you get a loud <strong>ReferenceError</strong>. \ud83d\udeab</li>\n</ul>\n<p>So, the introduction of let and const wasn't just an upgrade; it was a conscious decision to correct the shortcomings of var without breaking old\u00a0code.</p>\n<h3>Conclusion</h3>\n<p>And that\u2019s a wrap! We\u2019ve journeyed through the intricacies of JavaScript Compilation, unraveled the enigma of Hoisting, and decoded the Temporal Dead Zone. \ud83c\udf89 Understanding these core concepts doesn\u2019t just make you a better coder; it elevates you to JavaScript guru status.\u00a0\ud83e\uddd9\u200d\u2642\ufe0f</p>\n<p>So, the next time a variable throws you for a loop or your code acts like it\u2019s possessed, you\u2019ll be the exorcist who knows exactly how to cast out those coding demons.\u00a0\ud83d\udeab</p>\n<p>If this deep dive illuminated some dark corners of your JavaScript knowledge, <a href=\"https://www.buymeacoffee.com/jalilbm\">consider buying me a \u2615</a>. Your support keeps the enlightenment coming!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=92e5417dd904\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["programming","software-engineering","compilation","javascript","software-development"]},{"title":"The Art of Naming in Code: A Guide to Writing Clear, Understandable, and Meaningful Names","pubDate":"2023-10-14 19:59:59","link":"https://medium.com/@jalilbm/the-art-of-naming-in-code-a-guide-to-writing-clear-understandable-and-meaningful-names-ff046e09c637?source=rss-c89323f6a4a4------2","guid":"https://medium.com/p/ff046e09c637","author":"Abdeldjalil Benharkat","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Pv-VUt4YrXmAI6ZTvEquAg.png\"></figure><h3>Introduction</h3>\n<p>\ud83d\udc4b Hey there, fellow devs! Ever found yourself puzzled over what to name that function, class, or even a simple variable? Yeah, naming is hard, but it\u2019s also super important.</p>\n<p>\ud83e\udd14 Today, I\u2019m diving deep into the art of crafting meaningful names in your code. A lot of the wisdom I\u2019m sharing is inspired by the iconic book \u201cClean Code: A Handbook of Agile Software Craftsmanship\u201d by Robert C. Martin.\ud83d\udcda</p>\n<p>I\u2019ve also added my own insights from over 5 years of coding and leading dev teams. The examples are in Python, one of the most readable languages out there, which I absolutely love.</p>\n<p>Oh, and by the way, I\u2019ve written this article in a friendly tone and sprinkled it with emojis to make the read more enjoyable for you. \ud83c\udf89 Ready to level up your naming game? Let\u2019s get into it!\u00a0\ud83d\ude80</p>\n<h3>\ud83d\udc49 Name It Like You Mean\u00a0It</h3>\n<p>Naming isn\u2019t a side gig; it\u2019s the main event. \ud83c\udf1f So, let\u2019s get it right the first\u00a0time.</p>\n<p>Skip the vague stuff like n = 0. What's n? A puzzle? \ud83e\udd37\u200d\u2642\ufe0f Aim for clarity with something like numberOfUsers = 0 or userCount = 0.\u00a0\ud83d\udc65</p>\n<p>If you\u2019re leaning towards adding a comment for a variable, think again. Your name should say it all.\u00a0\ud83e\udd14</p>\n<p>For example, here\u2019s a Python function that\u2019s a bit\u00a0murky:</p>\n<pre>def fetch():<br>    result = []<br>    for item in some_list:<br>        if item.startswith('A'):<br>            result.append(item)<br>    return result</pre>\n<p>Confused about what it\u2019s fetching? \ud83e\udd37\u200d\u2642\ufe0f Let\u2019s\u00a0clarify:</p>\n<pre>def fetch_items_starting_with_A():<br>    items_with_A = []<br>    for item in some_list:<br>        if item.startswith('A'):<br>            items_with_A.append(item)<br>    return items_with_A</pre>\n<p>See the difference? The second version is <em>crystal clear.</em>\u00a0\ud83c\udfaf</p>\n<h3>\ud83d\udc49 Don\u2019t Play Mind Games: Avoid Misleading Names</h3>\n<p>Misleading names are a trap. \ud83d\udeab For example, hp might make sense for a hypotenuse, but it's also a Unix platform. Confusing? Yep.\u00a0\ud83e\udd14</p>\n<p>And don\u2019t misuse the term \u201clist.\u201d If it\u2019s not a list, don\u2019t call it accountList. Try accountGroup instead.\u00a0\ud83d\uddc2\ufe0f</p>\n<p>Also, avoid almost-identical names. Spotting the tiny difference between EfficientStringHandler and EfficientStringStorage is a\u00a0pain.</p>\n<p>Lastly, skip using lowercase l or uppercase O as variables. They look like 1 and 0, and that's just asking for\u00a0trouble.</p>\n<pre>a = l  # Don't do this!<br>if O == l:  # Seriously, don't!<br>    a = O1<br>else:<br>    l = O1</pre>\n<p>Bottom line: Clear names make everyone\u2019s life <em>easier</em>. <em>Period</em>.\u00a0\ud83c\udfaf</p>\n<h3>\ud83d\udc49 Make It Count: Names Should Differ for a\u00a0Reason</h3>\n<p>Don\u2019t just tweak names to keep the compiler happy.\u00a0\ud83d\udeab</p>\n<p>Steer clear of vague series like item1, item2, item3. They're as informative as a blank page. \ud83e\udd37\u200d\u2642\ufe0f And watch out for filler words. Adding Extra or Details to a name doesn't make it more meaningful.</p>\n<p>For instance, avoid Python functions like\u00a0this:</p>\n<pre>def fetch_user():<br>    # code<br><br>def fetch_user_data():<br>    # code<br><br>def fetch_user_details():<br>    # code</pre>\n<p>What\u2019s the difference? What each function will return as information? Your guess is as good as mine.\u00a0\ud83e\udd14</p>\n<p>The bottom line? If you\u2019re going to differentiate names, make sure they actually tell you something different. \ud83c\udfaf</p>\n<h3>\ud83d\udc49 Speak Easy: Use Names You Can Say Out\u00a0Loud</h3>\n<p>Our brains are built for language, so let\u2019s make our code speakable. \ud83d\udde3\ufe0f</p>\n<p>Unpronounceable names are a no-go. You can\u2019t discuss them without sounding like you\u2019re casting a spell.\u00a0\ud83e\uddd9\u200d\u2642\ufe0f</p>\n<p>For instance, dodge Python classes like\u00a0this:</p>\n<pre>class UsrPrflXYZ:<br>    crt_tmstp = None<br>    upd_tmstp = None<br>    rcrd_num = \"007\"</pre>\n<p>Try saying crt_tmstp out loud. Awkward, right?\u00a0\ud83e\udd14</p>\n<p>Instead, opt\u00a0for:</p>\n<pre>class UserProfile:<br>    creation_time = None<br>    update_time = None<br>    record_number = \"007\"</pre>\n<p>Now, you can actually discuss your code without needing a pronunciation guide.\u00a0\ud83c\udfaf</p>\n<h3>\ud83d\udc49 Find Me If You Can: Use Searchable Names</h3>\n<p>Ever tried finding a needle in a haystack? That\u2019s what it\u2019s like searching for single-letter variables or magic numbers in your code.\u00a0\ud83d\udd75\ufe0f\u200d\u2642\ufe0f</p>\n<p>For example, avoid Python loops like\u00a0this:</p>\n<pre>for i in range(10):<br>    x += (y[i] * 3) / 4</pre>\n<p>Good luck finding where 3 and 4 are used for this specific purpose.\u00a0\ud83e\udd37\u200d\u2642\ufe0f</p>\n<p>Instead, make it clear and searchable:</p>\n<pre>multiplier = 3<br>divider = 4<br>total_value = 0<br><br>for i in range(10):<br>    partial_value = some_list[i] * multiplier<br>    total_value += partial_value / divider</pre>\n<p>Now, multiplier and divider are way easier to find and understand. \ud83c\udfaf</p>\n<p>Rule of thumb: The broader the scope, the more descriptive the name should be.\u00a0\ud83d\udccf</p>\n<h3>\ud83d\udc49 Drop the Secret Code: Avoid Encodings</h3>\n<p>Let\u2019s talk about encodings. You know, those cryptic prefixes or suffixes that make your variable names look like they\u2019re in a secret language. \ud83e\udd2b</p>\n<p>Back in the day, Hungarian Notation was a thing, especially in languages that didn\u2019t have strong type systems. But guess what? Modern languages got your back with type checking. \ud83d\udee1\ufe0f</p>\n<p>For example, in Python, you don\u2019t need to do\u00a0this:</p>\n<pre>strName = \"John\"<br>intAge = 30</pre>\n<p>Just go\u00a0with:</p>\n<pre>name = \"John\"<br>age = 30</pre>\n<p>Your IDE will catch type errors way before you hit the run button.\u00a0\ud83d\ude80</p>\n<h3>\ud83d\udc49 No Mind Games: Avoid Mental\u00a0Mapping</h3>\n<p>Coding isn\u2019t a memory game. \ud83e\udde0\ud83d\udeab Your variable names should make sense without requiring a mental dictionary to decode\u00a0them.</p>\n<p>Let\u2019s be real, single-letter variables like i, j, or k are okay for tiny loops. But outside that, they're just mental speed bumps.\u00a0\ud83d\uded1</p>\n<p>Some devs love to show off how smart they are by using cryptic names that only they can understand. But <em>pros</em> know that clear code is the real MVP.\u00a0\ud83c\udf1f</p>\n<p>Remember, <strong>clarity is king</strong>. \ud83d\udc51 Write code that your future self and others can understand without needing a <strong>decoder\u00a0ring</strong>.</p>\n<h3>\ud83d\udc49 Nailing Class Names: Be Descriptive, Not\u00a0Vague</h3>\n<p>When you\u2019re naming classes, think of them as the main characters in your code\u2019s story. \ud83d\udcd6 Go for names that are self-explanatory and descriptive.</p>\n<p>For example, instead of something vague like DataHandler, how about InvoiceGenerator?</p>\n<p>Descriptive Naming:</p>\n<pre>class InvoiceGenerator:<br>    def generate_invoice_for_customer(self, customer_data):<br>        # Code to generate an invoice specifically for a customer<br>        pass</pre>\n<p>Vague Naming:</p>\n<pre>class DataHandler:<br>    def process(self, data):<br>        # Some code to generate an invoice<br>        pass</pre>\n<p>Steer clear of generic, overused terms like Manager, Handler, or Util. They're like the extras in a movie\u2014easy to forget and usually unimportant. \ud83c\udfac</p>\n<p>So, make your class names memorable and descriptive. Trust me, your future self and your teammates will thank you.\u00a0\ud83d\ude4f</p>\n<h3>\ud83d\udc49 Method Names: Action Heroes of Your\u00a0Code</h3>\n<p>Let\u2019s talk about method names. They\u2019re the action heroes in your code, so they gotta have some action-packed names.\u00a0\ud83c\udfac</p>\n<p>Use verbs or verb phrases that clearly spell out what the method does. For example, instead of a vague process(), how about calculateTotalPrice()?<br>Good\u00a0example:</p>\n<pre>def calculateTotalPrice():<br>    pass</pre>\n<p>Bad example:</p>\n<pre>def process():<br>    pass</pre>\n<p>For getters, setters, and boolean methods, stick to the classics: get, set, and is. Like\u00a0this:</p>\n<pre>def get_username():<br>    # code<br><br>def set_username(name):<br>    # code<br><br>def is_active():<br>    # code</pre>\n<p>So, make your method names as action-packed as a blockbuster movie. \ud83c\udfa5 Your code will read like a bestseller! \ud83d\udcda</p>\n<h3>\ud83d\udc49 Don\u2019t Be a Comedian in Your\u00a0Code</h3>\n<p>We all love a good joke, but your code isn\u2019t the place for it. \ud83d\ude45\u200d\u2642\ufe0f Being cute or clever with your naming can make your code hard to understand.</p>\n<p>For example, instead of a method named launchTheMissiles(), just go with sendNotifications(). It's clear and to the\u00a0point.</p>\n<p>Good example:</p>\n<pre>def sendNotifications():<br>    pass</pre>\n<p>Bad example:</p>\n<pre>def launchTheMissiles():<br>    pass</pre>\n<p>Bottom line: Your code should speak clearly, not crack jokes. \ud83e\udd13 Keep it professional!</p>\n<h3>\ud83d\udc49 Stick to One Term for One\u00a0Idea</h3>\n<p>Ever get lost in a sea of synonyms? One class uses download, another uses pullData, and yet another uses acquire. It's like calling a \"goal\" in football a \"touchdown,\" \"netter,\" and \"score\" all in the same match. Confusing, isn't it?<br>Keep your terminology consistent. It\u2019ll make your codebase a lot easier to navigate and understand. \ud83d\ude4f</p>\n<h3>\ud83d\udc49 Say No to Double\u00a0Meanings</h3>\n<p>Let\u2019s keep it real. Using the same word for different things is like calling both your dog and your favorite snack \u201cCookie.\u201d Confusing and not\u00a0cool.</p>\n<p>Suppose you\u2019ve got a method process that crunches some\u00a0numbers:</p>\n<pre>class DataAnalyzer:<br>    def process(self, data):<br>        # code to process numerical data</pre>\n<p>Now you\u2019re working on a new class where process would actually queue tasks. Don't use process again; it's misleading.</p>\n<pre>class TaskQueue:<br>    def enqueue(self, task):<br>        # code to add task to queue</pre>\n<p>Keep your terms clear and distinct. \ud83d\ude4c</p>\n<h3>\ud83d\udc49 Speak the Dev\u00a0Lingo</h3>\n<p>Let\u2019s not shy away from using tech language when it makes sense. We\u2019re all in the same boat here, so using CS (Computer Science) terms or design patterns in your code can actually make things\u00a0clearer.</p>\n<p>For example, if you\u2019re implementing a Singleton pattern, don\u2019t call it SingleInstanceThingy. Just call it Singleton.</p>\n<p>Or if you\u2019re working with a stack, don\u2019t call it LastInFirstOutArray. Just call it\u00a0Stack.</p>\n<p>Using the right technical terms not only makes your code easier to understand but also helps other devs to quickly get what you\u2019re doing.\u00a0\ud83c\udfaf</p>\n<h3>\ud83d\udc49 Speak the Business\u00a0Lingo</h3>\n<p>Sometimes the tech language just doesn\u2019t cut it. When you\u2019re solving a specific business problem, go ahead and use terms that make sense in that context. This way, even if a dev isn\u2019t familiar with the business, they can still talk to a domain expert and get up to\u00a0speed.</p>\n<p>For example, if you\u2019re working on a finance app and dealing with compound interest, don\u2019t call your function calcX. Call it calculateCompoundInterest.</p>\n<p>Or if you\u2019re in healthcare, and you\u2019re calculating Body Mass Index, don\u2019t name your function calcY. Name it calculateBMI.</p>\n<p>Using domain-specific terms makes your code more understandable to both devs and non-devs involved in the project. It\u2019s a win-win!\u00a0\ud83c\udf1f</p>\n<h3>\ud83d\udc49 Context Matters, Seriously</h3>\n<p>You know how sometimes you\u2019re reading through code and you come across a variable like x and you're like, \"What the heck is this?\" Yeah, we've all been there. Context is\u00a0key.</p>\n<p>Let\u2019s say you\u2019re working on a game and you have variables like score, level, lives. Alone, they're okay, but what if you're also dealing with user profiles? Suddenly, level could mean the user's experience level. Confusing, right?</p>\n<p>So, instead of just level, how about gameLevel and userExperienceLevel? Makes life easier for everyone who reads your\u00a0code.</p>\n<pre>class GameStats:<br>    def __init__(self):<br>        self.gameScore = 0<br>        self.gameLevel = 1<br>        self.gameLives = 3<br><br>class UserProfile:<br>    def __init__(self):<br>        self.userName = \"Jalil\"<br>        self.userExperienceLevel = \"Beginner\"</pre>\n<p>Or even better, encapsulate them in classes like GameStats and UserProfile. Now, when you see GameStats.gameLevel, you know exactly what's\u00a0up.</p>\n<p>So, next time you\u2019re tempted to name a variable x, think twice. Give it a name that makes sense in the context it's used.\u00a0\ud83d\ude4f</p>\n<h3>\ud83d\udc49 Use Positive Naming Conventions</h3>\n<p>Negative names for boolean variables can be confusing. For example, isNotAvailable is less intuitive than isAvailable. When you read the code, you might have to do a mental double-negation, and nobody wants\u00a0that.</p>\n<p>Good example:</p>\n<pre>if isAvailable:<br>    do_something()</pre>\n<p>Bad example:</p>\n<pre>if not isNotAvailable:<br>    do_something()</pre>\n<h3>\ud83d\udc49 Avoid Temporal Coupling with\u00a0Names</h3>\n<p>Another good practice is to avoid names that imply a specific order of operation, unless it\u2019s absolutely necessary. For example, step1Initialize() and step2Execute() can be problematic because they enforce a temporal coupling between methods. If the order changes, the names become misleading.</p>\n<h3>\ud83d\udc49 Less is More, But Don\u2019t Be\u00a0Cryptic</h3>\n<p>You know how sometimes devs go overboard and add too much context to variable or class names? It\u2019s like they\u2019re trying to tell you the entire backstory of a variable in its name. Not\u00a0cool.</p>\n<p>Imagine you\u2019re working on a blockchain project. You don\u2019t need to prefix every class or variable with Blockchain. That's just noise. Your IDE's gonna hate you for\u00a0that.</p>\n<p>Good example:</p>\n<pre>class BlockchainTransactionDetails:<br>    pass</pre>\n<p>Bad example:</p>\n<pre>class TransactionDetails:<br>    pass</pre>\n<p>In the bad example, the Blockchain prefix doesn't add value; it's just clutter. In a blockchain project, a TransactionDetails class is self-explanatory.</p>\n<p>So, the rule of thumb is: Be as specific as needed, but no more. If you\u2019re working in a specific module or package, you don\u2019t need to repeat that context in every name. Keep it clean and to the point.\u00a0\ud83c\udfaf</p>\n<p>\ud83d\udc4f Enjoyed the read? Keep the wisdom flowing with a \u2615! <a href=\"https://www.buymeacoffee.com/jalilbm\">Buy Me a Coffee</a>\u00a0\ud83d\ude4f</p>\n<h3>Conclusion</h3>\n<p>Alright, devs, we\u2019ve journeyed through the labyrinth of naming conventions, and it\u2019s clear that this isn\u2019t kid\u2019s play. You\u2019ve learned that a well-named variable can be a roadmap, guiding you through complex algorithms. A poorly named one? That\u2019s a one-way ticket to Debugging Hell.</p>\n<p>So, why should you care? Because good naming isn\u2019t just for you; it\u2019s a love letter to every dev who\u2019ll touch your code in the future, including \u201cFuture You.\u201d Trust me, that person is gonna be super grateful. \ud83d\ude4f</p>\n<p>If you\u2019ve been slacking in the naming department, now\u2019s the time to step up. Implement these practices in your next project. You\u2019ll not only become a better code writer but also make life easier for everyone else on your team. And who knows? Maybe your well-named variables and methods will be the unsung heroes in your next code review.\u00a0\ud83c\udf1f</p>\n<p><a href=\"https://www.buymeacoffee.com/jalilbm\">Buy Me a Coffee</a>\u00a0\u2615</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ff046e09c637\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Pv-VUt4YrXmAI6ZTvEquAg.png\"></figure><h3>Introduction</h3>\n<p>\ud83d\udc4b Hey there, fellow devs! Ever found yourself puzzled over what to name that function, class, or even a simple variable? Yeah, naming is hard, but it\u2019s also super important.</p>\n<p>\ud83e\udd14 Today, I\u2019m diving deep into the art of crafting meaningful names in your code. A lot of the wisdom I\u2019m sharing is inspired by the iconic book \u201cClean Code: A Handbook of Agile Software Craftsmanship\u201d by Robert C. Martin.\ud83d\udcda</p>\n<p>I\u2019ve also added my own insights from over 5 years of coding and leading dev teams. The examples are in Python, one of the most readable languages out there, which I absolutely love.</p>\n<p>Oh, and by the way, I\u2019ve written this article in a friendly tone and sprinkled it with emojis to make the read more enjoyable for you. \ud83c\udf89 Ready to level up your naming game? Let\u2019s get into it!\u00a0\ud83d\ude80</p>\n<h3>\ud83d\udc49 Name It Like You Mean\u00a0It</h3>\n<p>Naming isn\u2019t a side gig; it\u2019s the main event. \ud83c\udf1f So, let\u2019s get it right the first\u00a0time.</p>\n<p>Skip the vague stuff like n = 0. What's n? A puzzle? \ud83e\udd37\u200d\u2642\ufe0f Aim for clarity with something like numberOfUsers = 0 or userCount = 0.\u00a0\ud83d\udc65</p>\n<p>If you\u2019re leaning towards adding a comment for a variable, think again. Your name should say it all.\u00a0\ud83e\udd14</p>\n<p>For example, here\u2019s a Python function that\u2019s a bit\u00a0murky:</p>\n<pre>def fetch():<br>    result = []<br>    for item in some_list:<br>        if item.startswith('A'):<br>            result.append(item)<br>    return result</pre>\n<p>Confused about what it\u2019s fetching? \ud83e\udd37\u200d\u2642\ufe0f Let\u2019s\u00a0clarify:</p>\n<pre>def fetch_items_starting_with_A():<br>    items_with_A = []<br>    for item in some_list:<br>        if item.startswith('A'):<br>            items_with_A.append(item)<br>    return items_with_A</pre>\n<p>See the difference? The second version is <em>crystal clear.</em>\u00a0\ud83c\udfaf</p>\n<h3>\ud83d\udc49 Don\u2019t Play Mind Games: Avoid Misleading Names</h3>\n<p>Misleading names are a trap. \ud83d\udeab For example, hp might make sense for a hypotenuse, but it's also a Unix platform. Confusing? Yep.\u00a0\ud83e\udd14</p>\n<p>And don\u2019t misuse the term \u201clist.\u201d If it\u2019s not a list, don\u2019t call it accountList. Try accountGroup instead.\u00a0\ud83d\uddc2\ufe0f</p>\n<p>Also, avoid almost-identical names. Spotting the tiny difference between EfficientStringHandler and EfficientStringStorage is a\u00a0pain.</p>\n<p>Lastly, skip using lowercase l or uppercase O as variables. They look like 1 and 0, and that's just asking for\u00a0trouble.</p>\n<pre>a = l  # Don't do this!<br>if O == l:  # Seriously, don't!<br>    a = O1<br>else:<br>    l = O1</pre>\n<p>Bottom line: Clear names make everyone\u2019s life <em>easier</em>. <em>Period</em>.\u00a0\ud83c\udfaf</p>\n<h3>\ud83d\udc49 Make It Count: Names Should Differ for a\u00a0Reason</h3>\n<p>Don\u2019t just tweak names to keep the compiler happy.\u00a0\ud83d\udeab</p>\n<p>Steer clear of vague series like item1, item2, item3. They're as informative as a blank page. \ud83e\udd37\u200d\u2642\ufe0f And watch out for filler words. Adding Extra or Details to a name doesn't make it more meaningful.</p>\n<p>For instance, avoid Python functions like\u00a0this:</p>\n<pre>def fetch_user():<br>    # code<br><br>def fetch_user_data():<br>    # code<br><br>def fetch_user_details():<br>    # code</pre>\n<p>What\u2019s the difference? What each function will return as information? Your guess is as good as mine.\u00a0\ud83e\udd14</p>\n<p>The bottom line? If you\u2019re going to differentiate names, make sure they actually tell you something different. \ud83c\udfaf</p>\n<h3>\ud83d\udc49 Speak Easy: Use Names You Can Say Out\u00a0Loud</h3>\n<p>Our brains are built for language, so let\u2019s make our code speakable. \ud83d\udde3\ufe0f</p>\n<p>Unpronounceable names are a no-go. You can\u2019t discuss them without sounding like you\u2019re casting a spell.\u00a0\ud83e\uddd9\u200d\u2642\ufe0f</p>\n<p>For instance, dodge Python classes like\u00a0this:</p>\n<pre>class UsrPrflXYZ:<br>    crt_tmstp = None<br>    upd_tmstp = None<br>    rcrd_num = \"007\"</pre>\n<p>Try saying crt_tmstp out loud. Awkward, right?\u00a0\ud83e\udd14</p>\n<p>Instead, opt\u00a0for:</p>\n<pre>class UserProfile:<br>    creation_time = None<br>    update_time = None<br>    record_number = \"007\"</pre>\n<p>Now, you can actually discuss your code without needing a pronunciation guide.\u00a0\ud83c\udfaf</p>\n<h3>\ud83d\udc49 Find Me If You Can: Use Searchable Names</h3>\n<p>Ever tried finding a needle in a haystack? That\u2019s what it\u2019s like searching for single-letter variables or magic numbers in your code.\u00a0\ud83d\udd75\ufe0f\u200d\u2642\ufe0f</p>\n<p>For example, avoid Python loops like\u00a0this:</p>\n<pre>for i in range(10):<br>    x += (y[i] * 3) / 4</pre>\n<p>Good luck finding where 3 and 4 are used for this specific purpose.\u00a0\ud83e\udd37\u200d\u2642\ufe0f</p>\n<p>Instead, make it clear and searchable:</p>\n<pre>multiplier = 3<br>divider = 4<br>total_value = 0<br><br>for i in range(10):<br>    partial_value = some_list[i] * multiplier<br>    total_value += partial_value / divider</pre>\n<p>Now, multiplier and divider are way easier to find and understand. \ud83c\udfaf</p>\n<p>Rule of thumb: The broader the scope, the more descriptive the name should be.\u00a0\ud83d\udccf</p>\n<h3>\ud83d\udc49 Drop the Secret Code: Avoid Encodings</h3>\n<p>Let\u2019s talk about encodings. You know, those cryptic prefixes or suffixes that make your variable names look like they\u2019re in a secret language. \ud83e\udd2b</p>\n<p>Back in the day, Hungarian Notation was a thing, especially in languages that didn\u2019t have strong type systems. But guess what? Modern languages got your back with type checking. \ud83d\udee1\ufe0f</p>\n<p>For example, in Python, you don\u2019t need to do\u00a0this:</p>\n<pre>strName = \"John\"<br>intAge = 30</pre>\n<p>Just go\u00a0with:</p>\n<pre>name = \"John\"<br>age = 30</pre>\n<p>Your IDE will catch type errors way before you hit the run button.\u00a0\ud83d\ude80</p>\n<h3>\ud83d\udc49 No Mind Games: Avoid Mental\u00a0Mapping</h3>\n<p>Coding isn\u2019t a memory game. \ud83e\udde0\ud83d\udeab Your variable names should make sense without requiring a mental dictionary to decode\u00a0them.</p>\n<p>Let\u2019s be real, single-letter variables like i, j, or k are okay for tiny loops. But outside that, they're just mental speed bumps.\u00a0\ud83d\uded1</p>\n<p>Some devs love to show off how smart they are by using cryptic names that only they can understand. But <em>pros</em> know that clear code is the real MVP.\u00a0\ud83c\udf1f</p>\n<p>Remember, <strong>clarity is king</strong>. \ud83d\udc51 Write code that your future self and others can understand without needing a <strong>decoder\u00a0ring</strong>.</p>\n<h3>\ud83d\udc49 Nailing Class Names: Be Descriptive, Not\u00a0Vague</h3>\n<p>When you\u2019re naming classes, think of them as the main characters in your code\u2019s story. \ud83d\udcd6 Go for names that are self-explanatory and descriptive.</p>\n<p>For example, instead of something vague like DataHandler, how about InvoiceGenerator?</p>\n<p>Descriptive Naming:</p>\n<pre>class InvoiceGenerator:<br>    def generate_invoice_for_customer(self, customer_data):<br>        # Code to generate an invoice specifically for a customer<br>        pass</pre>\n<p>Vague Naming:</p>\n<pre>class DataHandler:<br>    def process(self, data):<br>        # Some code to generate an invoice<br>        pass</pre>\n<p>Steer clear of generic, overused terms like Manager, Handler, or Util. They're like the extras in a movie\u2014easy to forget and usually unimportant. \ud83c\udfac</p>\n<p>So, make your class names memorable and descriptive. Trust me, your future self and your teammates will thank you.\u00a0\ud83d\ude4f</p>\n<h3>\ud83d\udc49 Method Names: Action Heroes of Your\u00a0Code</h3>\n<p>Let\u2019s talk about method names. They\u2019re the action heroes in your code, so they gotta have some action-packed names.\u00a0\ud83c\udfac</p>\n<p>Use verbs or verb phrases that clearly spell out what the method does. For example, instead of a vague process(), how about calculateTotalPrice()?<br>Good\u00a0example:</p>\n<pre>def calculateTotalPrice():<br>    pass</pre>\n<p>Bad example:</p>\n<pre>def process():<br>    pass</pre>\n<p>For getters, setters, and boolean methods, stick to the classics: get, set, and is. Like\u00a0this:</p>\n<pre>def get_username():<br>    # code<br><br>def set_username(name):<br>    # code<br><br>def is_active():<br>    # code</pre>\n<p>So, make your method names as action-packed as a blockbuster movie. \ud83c\udfa5 Your code will read like a bestseller! \ud83d\udcda</p>\n<h3>\ud83d\udc49 Don\u2019t Be a Comedian in Your\u00a0Code</h3>\n<p>We all love a good joke, but your code isn\u2019t the place for it. \ud83d\ude45\u200d\u2642\ufe0f Being cute or clever with your naming can make your code hard to understand.</p>\n<p>For example, instead of a method named launchTheMissiles(), just go with sendNotifications(). It's clear and to the\u00a0point.</p>\n<p>Good example:</p>\n<pre>def sendNotifications():<br>    pass</pre>\n<p>Bad example:</p>\n<pre>def launchTheMissiles():<br>    pass</pre>\n<p>Bottom line: Your code should speak clearly, not crack jokes. \ud83e\udd13 Keep it professional!</p>\n<h3>\ud83d\udc49 Stick to One Term for One\u00a0Idea</h3>\n<p>Ever get lost in a sea of synonyms? One class uses download, another uses pullData, and yet another uses acquire. It's like calling a \"goal\" in football a \"touchdown,\" \"netter,\" and \"score\" all in the same match. Confusing, isn't it?<br>Keep your terminology consistent. It\u2019ll make your codebase a lot easier to navigate and understand. \ud83d\ude4f</p>\n<h3>\ud83d\udc49 Say No to Double\u00a0Meanings</h3>\n<p>Let\u2019s keep it real. Using the same word for different things is like calling both your dog and your favorite snack \u201cCookie.\u201d Confusing and not\u00a0cool.</p>\n<p>Suppose you\u2019ve got a method process that crunches some\u00a0numbers:</p>\n<pre>class DataAnalyzer:<br>    def process(self, data):<br>        # code to process numerical data</pre>\n<p>Now you\u2019re working on a new class where process would actually queue tasks. Don't use process again; it's misleading.</p>\n<pre>class TaskQueue:<br>    def enqueue(self, task):<br>        # code to add task to queue</pre>\n<p>Keep your terms clear and distinct. \ud83d\ude4c</p>\n<h3>\ud83d\udc49 Speak the Dev\u00a0Lingo</h3>\n<p>Let\u2019s not shy away from using tech language when it makes sense. We\u2019re all in the same boat here, so using CS (Computer Science) terms or design patterns in your code can actually make things\u00a0clearer.</p>\n<p>For example, if you\u2019re implementing a Singleton pattern, don\u2019t call it SingleInstanceThingy. Just call it Singleton.</p>\n<p>Or if you\u2019re working with a stack, don\u2019t call it LastInFirstOutArray. Just call it\u00a0Stack.</p>\n<p>Using the right technical terms not only makes your code easier to understand but also helps other devs to quickly get what you\u2019re doing.\u00a0\ud83c\udfaf</p>\n<h3>\ud83d\udc49 Speak the Business\u00a0Lingo</h3>\n<p>Sometimes the tech language just doesn\u2019t cut it. When you\u2019re solving a specific business problem, go ahead and use terms that make sense in that context. This way, even if a dev isn\u2019t familiar with the business, they can still talk to a domain expert and get up to\u00a0speed.</p>\n<p>For example, if you\u2019re working on a finance app and dealing with compound interest, don\u2019t call your function calcX. Call it calculateCompoundInterest.</p>\n<p>Or if you\u2019re in healthcare, and you\u2019re calculating Body Mass Index, don\u2019t name your function calcY. Name it calculateBMI.</p>\n<p>Using domain-specific terms makes your code more understandable to both devs and non-devs involved in the project. It\u2019s a win-win!\u00a0\ud83c\udf1f</p>\n<h3>\ud83d\udc49 Context Matters, Seriously</h3>\n<p>You know how sometimes you\u2019re reading through code and you come across a variable like x and you're like, \"What the heck is this?\" Yeah, we've all been there. Context is\u00a0key.</p>\n<p>Let\u2019s say you\u2019re working on a game and you have variables like score, level, lives. Alone, they're okay, but what if you're also dealing with user profiles? Suddenly, level could mean the user's experience level. Confusing, right?</p>\n<p>So, instead of just level, how about gameLevel and userExperienceLevel? Makes life easier for everyone who reads your\u00a0code.</p>\n<pre>class GameStats:<br>    def __init__(self):<br>        self.gameScore = 0<br>        self.gameLevel = 1<br>        self.gameLives = 3<br><br>class UserProfile:<br>    def __init__(self):<br>        self.userName = \"Jalil\"<br>        self.userExperienceLevel = \"Beginner\"</pre>\n<p>Or even better, encapsulate them in classes like GameStats and UserProfile. Now, when you see GameStats.gameLevel, you know exactly what's\u00a0up.</p>\n<p>So, next time you\u2019re tempted to name a variable x, think twice. Give it a name that makes sense in the context it's used.\u00a0\ud83d\ude4f</p>\n<h3>\ud83d\udc49 Use Positive Naming Conventions</h3>\n<p>Negative names for boolean variables can be confusing. For example, isNotAvailable is less intuitive than isAvailable. When you read the code, you might have to do a mental double-negation, and nobody wants\u00a0that.</p>\n<p>Good example:</p>\n<pre>if isAvailable:<br>    do_something()</pre>\n<p>Bad example:</p>\n<pre>if not isNotAvailable:<br>    do_something()</pre>\n<h3>\ud83d\udc49 Avoid Temporal Coupling with\u00a0Names</h3>\n<p>Another good practice is to avoid names that imply a specific order of operation, unless it\u2019s absolutely necessary. For example, step1Initialize() and step2Execute() can be problematic because they enforce a temporal coupling between methods. If the order changes, the names become misleading.</p>\n<h3>\ud83d\udc49 Less is More, But Don\u2019t Be\u00a0Cryptic</h3>\n<p>You know how sometimes devs go overboard and add too much context to variable or class names? It\u2019s like they\u2019re trying to tell you the entire backstory of a variable in its name. Not\u00a0cool.</p>\n<p>Imagine you\u2019re working on a blockchain project. You don\u2019t need to prefix every class or variable with Blockchain. That's just noise. Your IDE's gonna hate you for\u00a0that.</p>\n<p>Good example:</p>\n<pre>class BlockchainTransactionDetails:<br>    pass</pre>\n<p>Bad example:</p>\n<pre>class TransactionDetails:<br>    pass</pre>\n<p>In the bad example, the Blockchain prefix doesn't add value; it's just clutter. In a blockchain project, a TransactionDetails class is self-explanatory.</p>\n<p>So, the rule of thumb is: Be as specific as needed, but no more. If you\u2019re working in a specific module or package, you don\u2019t need to repeat that context in every name. Keep it clean and to the point.\u00a0\ud83c\udfaf</p>\n<p>\ud83d\udc4f Enjoyed the read? Keep the wisdom flowing with a \u2615! <a href=\"https://www.buymeacoffee.com/jalilbm\">Buy Me a Coffee</a>\u00a0\ud83d\ude4f</p>\n<h3>Conclusion</h3>\n<p>Alright, devs, we\u2019ve journeyed through the labyrinth of naming conventions, and it\u2019s clear that this isn\u2019t kid\u2019s play. You\u2019ve learned that a well-named variable can be a roadmap, guiding you through complex algorithms. A poorly named one? That\u2019s a one-way ticket to Debugging Hell.</p>\n<p>So, why should you care? Because good naming isn\u2019t just for you; it\u2019s a love letter to every dev who\u2019ll touch your code in the future, including \u201cFuture You.\u201d Trust me, that person is gonna be super grateful. \ud83d\ude4f</p>\n<p>If you\u2019ve been slacking in the naming department, now\u2019s the time to step up. Implement these practices in your next project. You\u2019ll not only become a better code writer but also make life easier for everyone else on your team. And who knows? Maybe your well-named variables and methods will be the unsung heroes in your next code review.\u00a0\ud83c\udf1f</p>\n<p><a href=\"https://www.buymeacoffee.com/jalilbm\">Buy Me a Coffee</a>\u00a0\u2615</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ff046e09c637\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["software-engineering","programming","clean-code","python","coding"]}]}